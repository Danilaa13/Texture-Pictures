from playwright.async_api import async_playwright
from collections import defaultdict
from MIXIN.mixin_save import save_images
from SERVER.pars_title_products import parse_title


async def scroll_until_show_more(page):
    """–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –Ω–∞–∂–∏–º–∞–µ—Ç '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë', –ø–æ–∫–∞ –∫–Ω–æ–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."""
    while True:
        await page.evaluate('window.scrollBy(0, window.innerHeight);')
        print('–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"...')
        show_more_button = await page.query_selector('a.js-ax-show-more-pagination')
        if show_more_button:
            print('–ö–Ω–æ–ø–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –∫–ª–∏–∫–∞–µ–º –∏ –∂–¥—ë–º...')
            await show_more_button.click()
            await page.wait_for_timeout(2000)
        else:
            print('–ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë" –±–æ–ª—å—à–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
            break


async def fetch_category_links(url):
    TARGET_NAMES = [
        "Egger Perfect Sense/Perfect Mat",
        "–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ú–î–§",
        "–ü–ª–∏—Ç—ã TSS",
        "–°—Ç–æ–ª–µ—à–Ω–∏—Ü—ã Slotex (–°–ª–æ—Ç–µ–∫—Å)",
        "–°—Ç–æ–ª–µ—à–Ω–∏—Ü—ã –ê–ú–ö-–¢—Ä–æ—è",
        "–ü–ª–∏–Ω—Ç—É—Å –¥–ª—è —Å—Ç–æ–ª–µ—à–Ω–∏—Ü",
        "–ü–ª–∞–Ω–∫–∏ –¥–ª—è –º–µ–±–µ–ª—å–Ω—ã—Ö —â–∏—Ç–æ–≤",
        "–ö—Ä–æ–º–∫–∞ ABS –¥–ª—è —Å—Ç–æ–ª–µ—à–Ω–∏—Ü",
        "–•–î–§",
        "–ö—Ä–æ–º–∫–∞ –ü–í–• Galoplast"
    ]

    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()
        await page.goto(url)

        # –ñ–¥–µ–º, –ø–æ–∫–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∑–∞–≥—Ä—É–∑—è—Ç—Å—è
        await page.wait_for_selector("div.category")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        filtered_links = await page.evaluate(f"""
                    () => {{
                        const targets = {TARGET_NAMES};
                        const links = [];
                        const items = document.querySelectorAll('.category-products-list li a');
                        items.forEach(item => {{
                            const text = item.innerText.trim();
                            const href = item.getAttribute('href');
                            if (
                                href &&
                                href.split('/').filter(x => x).length > 2 &&
                                targets.includes(text)
                            ) {{
                                links.push({{ name: text, url: 'https://www.tdserver.ru' + href }});
                            }}
                        }});
                        return links;
                    }}
                """)

        await browser.close()
        print("üìÅ –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫:", len(filtered_links))
        return filtered_links



async def fetch_product_data(page):

    await page.wait_for_selector(".product")

    print("üîç–ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö...")

    raw_products = await page.evaluate("""
        () => {
             const results = [];
            const items = document.querySelectorAll('.product');

            items.forEach(item => {
                const title = item.querySelector('a.product_title')?.innerText.trim() || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
                const code = item.querySelector('div.product_code strong.value')?.innerText.trim() || '–ë–µ–∑ –∫–æ–¥–∞';
                const img = item.querySelector('img.item_img')?.getAttribute('src') || '';
                
                if (img) {
                    results.push({
                        code: code,
                        title: title,
                        name: title,
                        image: 'https://www.tdserver.ru' + img
                    });
                }
            });

            return results;
        }
    """)
    products = []
    for product in raw_products:
        parsed_name = parse_title(product['name'])
        print(parsed_name)
        products.append({
            'title': product['title'],
            'name': f"{product['code']} - {parsed_name}",
            'image': product['image']
        })

    print(f"‚úÖ–ò–∑–≤–ª–µ—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}")
    return products



async def server_navigate_and_scrape(category_links):
    brand_dicts = {
        "AGT": {},
        "–ê–ú–ö-–¢—Ä–æ—è": {},
        "ARKOPA": {},
        "CLEAF": {},
        "Egger": {},
        "ETERNO": {},
        "EVOGLOSS": {},
        "Galoplast": {},
        "Slotex": {},
        "SMart": {},
        "Thermoplast": {},
        "–•–î–§": {},
        "–ü—Ä–æ—á–µ–µ": {}
    }


    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page()

        for category in category_links:
            print(f"–°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category['name']} ‚Üí {category['url']}")
            await page.goto(category['url'])
            await page.wait_for_selector('.product')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë"
            show_more_button = await page.query_selector('a.js-ax-show-more-pagination')
            if show_more_button:
                await scroll_until_show_more(page)
            else:
                print('–ö–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë" –Ω–µ—Ç ‚Äî —Å–æ–±–∏—Ä–∞–µ–º –≤—Å—ë —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.')

            products = await fetch_product_data(page)

            for product in products:
                name = product.get("name")
                img = product.get("image")
                title = product.get("title", "")
                matched = False

                for brand in brand_dicts:
                    if brand != "–ü—Ä–æ—á–µ–µ" and brand.lower() in title.lower():
                        brand_dicts[brand][name] = img
                        matched = True
                        break

                if not matched:
                    brand_dicts["–ü—Ä–æ—á–µ–µ"][name] = img


        await browser.close()

    return brand_dicts
